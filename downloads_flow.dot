// -*- backup-by-copying: t -*- 

digraph Download_Startup {
  ranksep=0.25;
  node [shape=box,style=filled];
  edge [arrowhead="vee",color=red];

  // Node naming convention:
  //	* Named by initial routine executed in box.
  // 	* That routine is named by <classabbrev>_<routinename>
  //	* Class abbreivations are:
  //		* RDH: ResourceDispatcherHost
  //		* DRH: DownloadResourceHandler
  //		* DFM: DownloadFileManager
  //		* DM: DownloadManager
  //		* HB: HistoryBackend
  //		* DI: DownloadItem
  //		* du: download_util::

  // 		***Nodes and Subgraphs***

  // Resource Dispatcher Host triggers (unlabeled)
  node [shape=octagon,fillcolor=powderblue];
  subgraph cluster_RDHTriggers {
    rank=same;
    color=invis;
    node [label="RDH"];
    RDH_OnResponseStarted;
    RDH_OnWillRead;
    RDH_OnReadCompleted;
    RDH_OnRequestRedirected;
    RDH_OnResponseCompleted;
  };
  RDH_CancelRequest [label="ResourceDispatcherHost::\nCancelRequest"];
  RDH_PauseRequest [fillcolor=powderblue,style=filled,
                    label="ResourceDispatcherHost::\n" +
		          "PauseRequest(false)",shape=octagon];

  node [shape=box]; // Only RDH are octagonal.

  // Download Resource Handler
  node [fillcolor=powderblue]; 
  subgraph cluster_drh {	  	
    label="DownloadResourceHandler";
    rank=same;
    DRH_OnResponseStarted [label="OnResponseStarted\n--\n" +
                                 "> Create DownloadCreateInfo\l" +
				 "> ResourceDispatcherHost::\l" +
				 "> PauseRequest(true)\l"];
    DRH_OnReadCompleted [label="OnReadCompleted\n" +
			       "(move buffer to shared comm)"];
    DRH_OnWillRead [label="OnWillRead\n" +
			   "(Create buffer)"];
    DRH_OnRequestRedirected [label="OnRequestRedirected\n" +
				   "(Note url)"];
    DRH_OnResponseCompleted [label="OnResponseCompleted"];
  };

  // Not completely clear what this does, but it appears to center the
  // DRH routines and spread them out.
  subgraph {
    rank=same;
    DRH_OnResponseStarted;
    DRH_OnWillRead;
    DRH_OnReadCompleted;
    DRH_OnRequestRedirected;
    DRH_OnResponseCompleted;
  };

  // History services.  
  node [fillcolor=grey];	   // History/database thread
  HistoryService [label="HistoryService"];
  HistoryBackend_CreateDownload [fillcolor=grey,
				 label="HistoryBackend::\n" +
				       "CreateDownload",group="init_path"];
  
  // Chrome Download Manager Delegate.
  node [fillcolor=palegreen];		// UI Thread
  subgraph cluster_cdmd {
    label="ChromeDownloadManagerDelegate";
    CDMD_ShouldStartDownload [label="ShouldStartDownload\n" +
                                    "> Safe Browsing Check"];
    CDMD_CheckDownloadUrlDone [label="CheckDownloadUrlDone\n" +
				     "> Checks Visited Before Today"];
    CDMD_CheckVisitedReferrerBeforeDone
        [label="CheckVisitedReferrerBeforeDone\n" +
 	       "> (dangerous?/suggest_path)"];
    CDMD_CheckIfSuggestedPathExists [label="CheckIfSuggestedPathExists\n" +
				           "(create empty file)",
				     fillcolor=bisque];
    CDMD_OnPathExistenceAvailable [label="OnPathExistenceAvailable\n" +
				         "> Set file check results\l"];
  };
  CDMD_OverrideIntermediateFile [label="ChromeDownloadManagerDelegate::\n" +
				       "OverrideIntermediateFile\n" +
				        "> Set intermediate file\l
					"  for non-dangerous downloads\l",
				 peripheries=2];
  CDMD_ShouldCompleteDownload [label="ChromeDownloadManagerDelegate::\n" +
				     "ShouldCompleteDownload\n" +
				      "> Gates download completion\l>" +
				      " Safe browsing content check\l",
			       peripheries=2];

  // Download Manager.  
  node [fillcolor=palegreen];		// UI Thread
  DM_RestartDownload [label="DownloadManager::\n" +
			    "RestartDownload\n" +
			    "> May prompt for file\l>" +
			    " DownloadItem::OnPathDetermined\l"];
  DM_OnQueryDownloadEntriesComplete [label="DownloadManager\n" +
				           "OnQueryDownloadEntriesComplete\n" +
				           "> history -> history_downloads_\l"];
  DM_UpdateDownload [label="DownloadManager::\n" +
			   "UpdateDownload\n" +
			   "> Update UI displays\l"" +
			   "> Update History Item\l" +
			   "> Update App Icon\l"];
  DM_StartDownload [label="DownloadManager::\n" +
			  "StartDownload\n"];
  DM_OnDownloadRenamedToFinalName [label="DownloadManager::\n" +
				         "OnDownloadRenamedToFinalName\n" +
				         "> Check and set uniquifier\l" +
					 "> Update history with name\l",
			           group="completepath"];
  DM_DownloadCancelled [label="DownloadManager::\n" +
			      "DownloadCancelled\n" +
			      ">Update History\l"];
  DM_MaybeCompleteDownload [label="[ThreadJoin]\n" +
				  "DownloadManager::\n" +
				  "MaybeCompleteDownload\n" +
				  "> Remove from Queues\l" +
				  "> Update item and history state\l"];
  User_Cancel [label="User Cancel or Remove"];
  DM_OnCreateDownloadEntryComplete [label="DownloadManager\n" +
					  "OnCreateDownloadEntryComplete\n" +
					  "> download -> history_downloads_\l"+
					  "> ShowDownloadInBrowser\l"+
					  "> NotifyObservers\l",
				    group="init_path"];
  DM_DangerousDownloadValidated [label="DownloadManager::\n" +
				       "DangerousDownloadValidated\n" +
				       ">> Set safety state\l"+
				       "> Update Observers\l",
				 group="init_path"];
  DM_OnAllDataSaved [label="DownloadManager::\n" +
			   "OnAllDataSaved\n" +
			    "> DownloadItem::OnAllDataSaved\l"+
			    ">> Set all_data_saved_\l"];
  DangerousConfirmationDialog [label="Dangerous Confirmation Dialog",
  			       group="init_path"];
  DM_OnResponseCompleted [label="DownloadManager::\n" +
				"OnResponseCompleted"];
  DM_OnDownloadError [label="DownloadManager::\n" +
  		            "OnDownloadError\n" +
 			    "> Remove from history\l"];

  // Download Item
  node [fillcolor=palegreen];		// UI Thread
  DI_OnDownloadRenamedToFinalName [label="DownloadItem::\n" +
				         "OnDownloadRenamedToFinalName",
				   group="completepath",group="completepath"];
  DI_OnDownloadCompleting [label="DownloadItem::\n" +
				 "OnDownloadCompleting"];
  DI_Completed [label="DownloadItem::\n" +
  	              "Completed\n" +
 		      "\n" +
 		      "> Open if extenion install or auto-open\l"+
		      "> Mark as auto-opened if temporary\l"+
		      "> Update observers\l"+
		      "> If name finalized, notify observers.\l",
		group="completepath"];
  DI_Interrupted [label="DownloadItem::Interrupted\n" +
  		        "> Update item\l"+
			"> Notify Observers\l"];

  // Download File Manager
  node [fillcolor=bisque];		// FILE thread
  DFM_StartDownload [label="DownloadFileManager::\n" +
			   "StartDownload\n" +
 			   "> DownloadManager::CreateDownloadItem\l",
		     group="initpath",fillcolor=palegreen];
  DFM_CreateDownloadFile [label="DownloadFileManager::\n" +
				"CreateDownloadFile\n" +
				"> Start In Progress timer if needed\l",
			  group="initpath"];
  DFM_UpdateInProgressDownloads
      [label="[Timer based; input enables/disables]\n" +
             "\n" +
 	     "DownloadFileManager::\n" +
 	     "UpdateInProgressDownloads"];
  DFM_UpdateDownload [label="DownloadFileManager::\n" +
  		            "UpdateDownload\n" +
 			    "(write data to file)"];
  DFM_OnResponseCompleted [label="DownloadFileManager::\n" +
				 "OnResponseCompleted\n" +
				 "> cleanup\l"+
				 "> Stop In Progress timer\l"+
				 "  if no downloads active\l"];
  DFM_CancelDownload [label="DownloadFileManager::\n" +
			    "CancelDownload\n" +
 			    "> Remove from list\l"+
			    "> Delete if name active\l"];
  OpenItem [label="platform_util::\n" +
  	          "OpenItem"];
  DFM_RenameInProgressDownloadFile [label="DownloadFileManager::\n" +
				          "RenameInProgressDownloadFile\n" +
					  "> Rename\l"];
  DFM_RenameCompletingDownloadFile
      [label="DownloadFileManager::\n" +
             "RenameCompletingDownloadFile\n" +
 	     "> Uniquify (if final & dangerous)\l"+
 	     "> Rename\l> Annoatate (if MacOSX)\l"];
  DFM_CancelDownloadOnRename [label="DownloadFileManager::\n" +
				    "CancelDownloadOnRename\n"];
  DFM_CompleteDownload [label="DownloadFileManager::\n" +
			      "CompleteDownload\n" +
 			      "> Detach download file\l"];

  // Download Request Handle
  node [fillcolor=white];
  DRH_CancelRequest [label="DownloadRequestHandle::\n" +
			   "CancelRequest"];

  // 	***Relationships***

  // ResourceDispatcherHost to DownloadResourceHandler
  edge [color=black];	    // Funciton calls.
  RDH_OnResponseStarted -> DRH_OnResponseStarted
      [label="(Indirectly)",style=dashed];
  RDH_OnRequestRedirected -> DRH_OnRequestRedirected;
  RDH_OnWillRead -> DRH_OnWillRead;
  RDH_OnReadCompleted -> DRH_OnReadCompleted;
  RDH_OnResponseCompleted -> DRH_OnResponseCompleted;

  // Initialilization path
  edge [color=red];   // Thread post tasks.
  DRH_OnResponseStarted -> DFM_StartDownload;
  DFM_StartDownload -> DFM_CreateDownloadFile;
  DFM_CreateDownloadFile -> DM_StartDownload;
  DFM_CreateDownloadFile -> RDH_PauseRequest;
  DM_StartDownload -> CDMD_ShouldStartDownload;
  DM_StartDownload -> DM_RestartDownload [style=dashed,color=black];
  DM_RestartDownload -> DFM_RenameInProgressDownloadFile;
  DM_RestartDownload -> HistoryBackend_CreateDownload;
  DM_RestartDownload -> CDMD_OverrideIntermediateFile [color=black];

  CDMD_ShouldStartDownload -> CDMD_CheckDownloadUrlDone
      [label="(Indirectly)"style=dashed];
  CDMD_CheckDownloadUrlDone -> CDMD_CheckVisitedReferrerBeforeDone
      [style=dashed, label="(Indirectly)"];
  CDMD_CheckVisitedReferrerBeforeDone -> CDMD_CheckIfSuggestedPathExists;
  CDMD_CheckIfSuggestedPathExists -> CDMD_OnPathExistenceAvailable;
  CDMD_OnPathExistenceAvailable -> DM_RestartDownload [color=black];

  // History backend and dangerous setup.
  HistoryBackend_CreateDownload -> DM_OnCreateDownloadEntryComplete;
  DM_OnCreateDownloadEntryComplete -> DM_MaybeCompleteDownload
      [color=black,samehead="join"];
  DM_OnCreateDownloadEntryComplete -> DangerousConfirmationDialog
      [style=dashed, label="dangerous\n" +
			   "(sets up dialog)"];
  CDMD_ShouldCompleteDownload -> DangerousConfirmationDialog
      [style=dashed, label="dangerous\n" +
      		           "(sets up dialog)"];
  CDMD_ShouldCompleteDownload -> DM_MaybeCompleteDownload
      [color=black,dir=back];
  CDMD_ShouldCompleteDownload -> DM_MaybeCompleteDownload
      [color=black, style=dashed, label="(May not happen\n" +
				        " or be indirect)"];
  DangerousConfirmationDialog -> DM_DangerousDownloadValidated
      [label="Validated",color=black];
  DM_DangerousDownloadValidated -> DM_MaybeCompleteDownload
      [color=black,samehead="join"];

  // Data response completed path.
  DRH_OnResponseCompleted -> DFM_OnResponseCompleted;
  DFM_OnResponseCompleted -> DM_OnResponseCompleted
      [label="download_manager exists"];
  DM_OnResponseCompleted -> DM_OnAllDataSaved [color=black];
  DM_OnAllDataSaved -> DM_MaybeCompleteDownload [color=black,samehead="join"];

  // Read path
  DRH_OnReadCompleted -> DFM_UpdateDownload [label="shared comm empty"];
  
  // Download completion path
  DM_MaybeCompleteDownload -> DI_OnDownloadCompleting [color=black];
  DI_OnDownloadCompleting -> DI_Completed [label="!needs rename",color=black];
  DI_OnDownloadCompleting -> DFM_CompleteDownload
      [label="!needs rename",color=red];
  DI_OnDownloadCompleting -> DFM_RenameCompletingDownloadFile
      [label="needs rename"];
  DFM_RenameCompletingDownloadFile -> DM_OnDownloadRenamedToFinalName;
  DM_OnDownloadRenamedToFinalName -> DFM_CompleteDownload [color=red];
  DM_OnDownloadRenamedToFinalName -> DI_OnDownloadRenamedToFinalName
      [color=black];
  DI_OnDownloadRenamedToFinalName -> DI_Completed
      [color=black,label="needed rename && SAFE"];
  DI_Completed -> OpenItem [label="Download auto opens\n" +
				  " and not Mac"];

  // History Initialization
  HistoryService -> DM_OnQueryDownloadEntriesComplete [label="History loaded"];

  // 	Error pathways
  edge [style=dotted];
  DFM_StartDownload -> DRH_CancelRequest
      [label="no download\n" +
             "manager",color=black];
  DFM_CreateDownloadFile -> DRH_CancelRequest
      [label="file init\fails",color=black];
  User_Cancel -> DM_DownloadCancelled [color=black];
  DangerousConfirmationDialog -> DM_DownloadCancelled
      [label="Canceled",color=black];
  DFM_RenameInProgressDownloadFile -> DFM_CancelDownloadOnRename
      [color=black, label="Rename failed"];
  DFM_CancelDownloadOnRename -> DM_DownloadCancelled [color=red];
  DFM_CancelDownloadOnRename -> DRH_CancelRequest
      [label="No Download\n" +
             "Manager",color=black];
  DFM_RenameCompletingDownloadFile -> DFM_CancelDownloadOnRename
      [color=black,label="Rename failed"];
  DFM_OnResponseCompleted -> DFM_CancelDownload
      [color=black,weight=0,label="No download manager"];
  DRH_CancelRequest -> RDH_CancelRequest;
  DM_OnResponseCompleted -> DM_OnDownloadError [color=black];

  edge [style=solid,color=black];
  DM_DownloadCancelled -> DRH_CancelRequest;
  DM_DownloadCancelled -> DFM_CancelDownload;
  DM_OnDownloadError -> DI_Interrupted;
  DM_OnDownloadError -> DFM_CancelDownload [color=red];

  //	Timer control
  edge [style=dashed,color=red];
  DFM_CreateDownloadFile -> DFM_UpdateInProgressDownloads;
  DFM_OnResponseCompleted -> DFM_UpdateInProgressDownloads;
  DFM_CancelDownload -> DFM_UpdateInProgressDownloads;
  DFM_UpdateInProgressDownloads -> DM_UpdateDownload
      [label="For Each Download",style=solid];

  // Layout control
  edge [style=invis];
  DRH_OnRequestRedirected -> HistoryService;

  subgraph cluster_cancel_pathway {
    color=invis;
    DRH_CancelRequest;
    DFM_CancelDownload;
    DM_DownloadCancelled;
    User_Cancel;
    DFM_UpdateInProgressDownloads;
  };

  subgraph cluster_legend {
    label="Legend";
    edge [style=normal];
    blank1 [label="",style=filled,fillcolor=white];
    blank2 [label="",style=filled,fillcolor=white];
    blank3 [label="",style=filled,fillcolor=white];
    blank4 [label="",style=filled,fillcolor=white];
    blank5 [label="",style=filled,fillcolor=white];
    blank6 [label="",style=filled,fillcolor=white];
    blank7 [label="",style=filled,fillcolor=white];
    blank8 [label="",style=filled,fillcolor=white];
    UI_Thread [style=filled,fillcolor=palegreen];		  
    IO_Thread [style=filled, fillcolor=powderblue];
    blank3->blank4 [color=black,label="Function call"]
    blank1 -> blank2 [color=red,label="Async Message"];
    blank2->blank5 [color=invis];
    blank4->blank7 [color=invis];
    blank5->blank6 [color=red,style=dotted,label="Uncommon/error\n" +
				"path"];
    blank7->blank8 [color=red,style=dashed,label="Timer control"]
    FILE_Thread [style=filled, fillcolor=bisque];
    History_Thread [style=filled, fillcolor=grey];
    ResourceDispatcherHost [shape=octagon,style=filled,fillcolor=powderblue];
    UI_Thread -> IO_Thread -> FILE_Thread -> History_Thread -> ResourceDispatcherHost  [style=invis,weight=10];
  };
}

